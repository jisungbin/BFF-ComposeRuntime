// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protobuf.source.component.CellDividerComponent in component/cell_divider_component.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package protobuf.source.component

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.JvmField
import com.squareup.wire.internal.JvmStatic
import okio.ByteString

public class CellDividerComponent(
  @field:WireField(
    tag = 1,
    adapter = "protobuf.source.component.ComponentBase#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val base: ComponentBase? = null,
  @field:WireField(
    tag = 2,
    adapter = "protobuf.source.component.CellDividerComponent${'$'}Style#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val style: Style = Style.STYLE_UNSPECIFIED,
  @field:WireField(
    tag = 3,
    adapter = "protobuf.source.component.CellTextComponent#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val text: CellTextComponent? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<CellDividerComponent, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CellDividerComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (base != other.base) return false
    if (style != other.style) return false
    if (text != other.text) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (base?.hashCode() ?: 0)
      result = result * 37 + style.hashCode()
      result = result * 37 + (text?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (base != null) result += """base=$base"""
    result += """style=$style"""
    if (text != null) result += """text=$text"""
    return result.joinToString(prefix = "CellDividerComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    base: ComponentBase? = this.base,
    style: Style = this.style,
    text: CellTextComponent? = this.text,
    unknownFields: ByteString = this.unknownFields,
  ): CellDividerComponent = CellDividerComponent(base, style, text, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CellDividerComponent> =
      object : ProtoAdapter<CellDividerComponent>(
        FieldEncoding.LENGTH_DELIMITED,
        CellDividerComponent::class,
        "type.googleapis.com/protobuf.source.component.CellDividerComponent",
        PROTO_3,
        null,
        "component/cell_divider_component.proto"
      ) {
        override fun encodedSize(`value`: CellDividerComponent): Int {
          var size = value.unknownFields.size
          if (value.base != null) {
            size += ComponentBase.ADAPTER.encodedSizeWithTag(1, value.base)
          }
          if (value.style != protobuf.source.component.CellDividerComponent.Style.STYLE_UNSPECIFIED) {
            size += Style.ADAPTER.encodedSizeWithTag(2, value.style)
          }
          if (value.text != null) {
            size += CellTextComponent.ADAPTER.encodedSizeWithTag(3, value.text)
          }
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: CellDividerComponent) {
          if (value.base != null) {
            ComponentBase.ADAPTER.encodeWithTag(writer, 1, value.base)
          }
          if (value.style != protobuf.source.component.CellDividerComponent.Style.STYLE_UNSPECIFIED) {
            Style.ADAPTER.encodeWithTag(writer, 2, value.style)
          }
          if (value.text != null) {
            CellTextComponent.ADAPTER.encodeWithTag(writer, 3, value.text)
          }
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: CellDividerComponent) {
          writer.writeBytes(value.unknownFields)
          if (value.text != null) {
            CellTextComponent.ADAPTER.encodeWithTag(writer, 3, value.text)
          }
          if (value.style != protobuf.source.component.CellDividerComponent.Style.STYLE_UNSPECIFIED) {
            Style.ADAPTER.encodeWithTag(writer, 2, value.style)
          }
          if (value.base != null) {
            ComponentBase.ADAPTER.encodeWithTag(writer, 1, value.base)
          }
        }

        override fun decode(reader: ProtoReader): CellDividerComponent {
          var base: ComponentBase? = null
          var style: Style = Style.STYLE_UNSPECIFIED
          var text: CellTextComponent? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> base = ComponentBase.ADAPTER.decode(reader)
              2 -> try {
                style = Style.ADAPTER.decode(reader)
              } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
                reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
              }
              3 -> text = CellTextComponent.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return CellDividerComponent(
            base = base,
            style = style,
            text = text,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: CellDividerComponent): CellDividerComponent = value.copy(
          base = value.base?.let(ComponentBase.ADAPTER::redact),
          text = value.text?.let(CellTextComponent.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

    private const val serialVersionUID: Long = 0L
  }

  public enum class Style(
    override val `value`: Int,
  ) : WireEnum {
    STYLE_UNSPECIFIED(0),
    STYLE_LIST(1),
    STYLE_SECTION(2),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Style> = object : EnumAdapter<Style>(
        Style::class,
        PROTO_3,
        Style.STYLE_UNSPECIFIED
      ) {
        override fun fromValue(`value`: Int): Style? = Style.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): Style? = when (`value`) {
        0 -> STYLE_UNSPECIFIED
        1 -> STYLE_LIST
        2 -> STYLE_SECTION
        else -> null
      }
    }
  }
}
