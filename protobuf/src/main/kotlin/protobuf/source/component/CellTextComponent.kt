// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protobuf.source.component.CellTextComponent in component/cell_text_component.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package protobuf.source.component

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class CellTextComponent(
  @field:WireField(
    tag = 1,
    adapter = "protobuf.source.component.ComponentBase#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val base: ComponentBase? = null,
  @field:WireField(
    tag = 2,
    adapter = "protobuf.source.component.CellTextStyle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val style: CellTextStyle = CellTextStyle.CELL_TEXT_STYLE_UNSPECIFIED,
  @field:WireField(
    tag = 3,
    adapter = "protobuf.source.component.CellColor#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val color: CellColor = CellColor.CELL_COLOR_UNSPECIFIED,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val text: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<CellTextComponent, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CellTextComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (base != other.base) return false
    if (style != other.style) return false
    if (color != other.color) return false
    if (text != other.text) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (base?.hashCode() ?: 0)
      result = result * 37 + style.hashCode()
      result = result * 37 + color.hashCode()
      result = result * 37 + text.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (base != null) result += """base=$base"""
    result += """style=$style"""
    result += """color=$color"""
    result += """text=${sanitize(text)}"""
    return result.joinToString(prefix = "CellTextComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    base: ComponentBase? = this.base,
    style: CellTextStyle = this.style,
    color: CellColor = this.color,
    text: String = this.text,
    unknownFields: ByteString = this.unknownFields,
  ): CellTextComponent = CellTextComponent(base, style, color, text, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CellTextComponent> = object : ProtoAdapter<CellTextComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      CellTextComponent::class, 
      "type.googleapis.com/protobuf.source.component.CellTextComponent", 
      PROTO_3, 
      null, 
      "component/cell_text_component.proto"
    ) {
      override fun encodedSize(`value`: CellTextComponent): Int {
        var size = value.unknownFields.size
        if (value.base != null) {
          size += ComponentBase.ADAPTER.encodedSizeWithTag(1, value.base)
        }
        if (value.style != protobuf.source.component.CellTextStyle.CELL_TEXT_STYLE_UNSPECIFIED) {
          size += CellTextStyle.ADAPTER.encodedSizeWithTag(2, value.style)
        }
        if (value.color != protobuf.source.component.CellColor.CELL_COLOR_UNSPECIFIED) {
          size += CellColor.ADAPTER.encodedSizeWithTag(3, value.color)
        }
        if (value.text != "") {
          size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.text)
        }
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: CellTextComponent) {
        if (value.base != null) {
          ComponentBase.ADAPTER.encodeWithTag(writer, 1, value.base)
        }
        if (value.style != protobuf.source.component.CellTextStyle.CELL_TEXT_STYLE_UNSPECIFIED) {
          CellTextStyle.ADAPTER.encodeWithTag(writer, 2, value.style)
        }
        if (value.color != protobuf.source.component.CellColor.CELL_COLOR_UNSPECIFIED) {
          CellColor.ADAPTER.encodeWithTag(writer, 3, value.color)
        }
        if (value.text != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 4, value.text)
        }
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: CellTextComponent) {
        writer.writeBytes(value.unknownFields)
        if (value.text != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 4, value.text)
        }
        if (value.color != protobuf.source.component.CellColor.CELL_COLOR_UNSPECIFIED) {
          CellColor.ADAPTER.encodeWithTag(writer, 3, value.color)
        }
        if (value.style != protobuf.source.component.CellTextStyle.CELL_TEXT_STYLE_UNSPECIFIED) {
          CellTextStyle.ADAPTER.encodeWithTag(writer, 2, value.style)
        }
        if (value.base != null) {
          ComponentBase.ADAPTER.encodeWithTag(writer, 1, value.base)
        }
      }

      override fun decode(reader: ProtoReader): CellTextComponent {
        var base: ComponentBase? = null
        var style: CellTextStyle = CellTextStyle.CELL_TEXT_STYLE_UNSPECIFIED
        var color: CellColor = CellColor.CELL_COLOR_UNSPECIFIED
        var text: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> base = ComponentBase.ADAPTER.decode(reader)
            2 -> try {
              style = CellTextStyle.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            3 -> try {
              color = CellColor.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> text = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CellTextComponent(
          base = base,
          style = style,
          color = color,
          text = text,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: CellTextComponent): CellTextComponent = value.copy(
        base = value.base?.let(ComponentBase.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
