// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protobuf.source.attributes.Attributes in attributes/attributes.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package protobuf.source.attributes

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.countNonNull
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class Attributes(
  @field:WireField(
    tag = 1,
    adapter = "protobuf.source.attributes.Attributes${'$'}OffsetAttribute#ADAPTER",
    oneofName = "type",
    schemaIndex = 0,
  )
  public val offset: OffsetAttribute? = null,
  @field:WireField(
    tag = 2,
    adapter = "protobuf.source.attributes.Attributes${'$'}BorderAttribute#ADAPTER",
    oneofName = "type",
    schemaIndex = 1,
  )
  public val border: BorderAttribute? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Attributes, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(offset, border) <= 1) {
      "At most one of offset, border may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Attributes) return false
    if (unknownFields != other.unknownFields) return false
    if (offset != other.offset) return false
    if (border != other.border) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (offset?.hashCode() ?: 0)
      result = result * 37 + (border?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (offset != null) result += """offset=$offset"""
    if (border != null) result += """border=$border"""
    return result.joinToString(prefix = "Attributes{", separator = ", ", postfix = "}")
  }

  public fun copy(
    offset: OffsetAttribute? = this.offset,
    border: BorderAttribute? = this.border,
    unknownFields: ByteString = this.unknownFields,
  ): Attributes = Attributes(offset, border, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Attributes> = object : ProtoAdapter<Attributes>(
      FieldEncoding.LENGTH_DELIMITED, 
      Attributes::class, 
      "type.googleapis.com/protobuf.source.attributes.Attributes", 
      PROTO_3, 
      null, 
      "attributes/attributes.proto"
    ) {
      override fun encodedSize(`value`: Attributes): Int {
        var size = value.unknownFields.size
        size += OffsetAttribute.ADAPTER.encodedSizeWithTag(1, value.offset)
        size += BorderAttribute.ADAPTER.encodedSizeWithTag(2, value.border)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Attributes) {
        OffsetAttribute.ADAPTER.encodeWithTag(writer, 1, value.offset)
        BorderAttribute.ADAPTER.encodeWithTag(writer, 2, value.border)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Attributes) {
        writer.writeBytes(value.unknownFields)
        BorderAttribute.ADAPTER.encodeWithTag(writer, 2, value.border)
        OffsetAttribute.ADAPTER.encodeWithTag(writer, 1, value.offset)
      }

      override fun decode(reader: ProtoReader): Attributes {
        var offset: OffsetAttribute? = null
        var border: BorderAttribute? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> offset = OffsetAttribute.ADAPTER.decode(reader)
            2 -> border = BorderAttribute.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Attributes(
          offset = offset,
          border = border,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Attributes): Attributes = value.copy(
        offset = value.offset?.let(OffsetAttribute.ADAPTER::redact),
        border = value.border?.let(BorderAttribute.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public class OffsetAttribute(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      schemaIndex = 0,
    )
    public val top: Float? = null,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      schemaIndex = 1,
    )
    public val leading: Float? = null,
    @field:WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      schemaIndex = 2,
    )
    public val bottom: Float? = null,
    @field:WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      schemaIndex = 3,
    )
    public val trailing: Float? = null,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<OffsetAttribute, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is OffsetAttribute) return false
      if (unknownFields != other.unknownFields) return false
      if (top != other.top) return false
      if (leading != other.leading) return false
      if (bottom != other.bottom) return false
      if (trailing != other.trailing) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + (top?.hashCode() ?: 0)
        result = result * 37 + (leading?.hashCode() ?: 0)
        result = result * 37 + (bottom?.hashCode() ?: 0)
        result = result * 37 + (trailing?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (top != null) result += """top=$top"""
      if (leading != null) result += """leading=$leading"""
      if (bottom != null) result += """bottom=$bottom"""
      if (trailing != null) result += """trailing=$trailing"""
      return result.joinToString(prefix = "OffsetAttribute{", separator = ", ", postfix = "}")
    }

    public fun copy(
      top: Float? = this.top,
      leading: Float? = this.leading,
      bottom: Float? = this.bottom,
      trailing: Float? = this.trailing,
      unknownFields: ByteString = this.unknownFields,
    ): OffsetAttribute = OffsetAttribute(top, leading, bottom, trailing, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<OffsetAttribute> = object : ProtoAdapter<OffsetAttribute>(
        FieldEncoding.LENGTH_DELIMITED, 
        OffsetAttribute::class, 
        "type.googleapis.com/protobuf.source.attributes.Attributes.OffsetAttribute", 
        PROTO_3, 
        null, 
        "attributes/attributes.proto"
      ) {
        override fun encodedSize(`value`: OffsetAttribute): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.FLOAT.encodedSizeWithTag(1, value.top)
          size += ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.leading)
          size += ProtoAdapter.FLOAT.encodedSizeWithTag(3, value.bottom)
          size += ProtoAdapter.FLOAT.encodedSizeWithTag(4, value.trailing)
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: OffsetAttribute) {
          ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.top)
          ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.leading)
          ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.bottom)
          ProtoAdapter.FLOAT.encodeWithTag(writer, 4, value.trailing)
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: OffsetAttribute) {
          writer.writeBytes(value.unknownFields)
          ProtoAdapter.FLOAT.encodeWithTag(writer, 4, value.trailing)
          ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.bottom)
          ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.leading)
          ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.top)
        }

        override fun decode(reader: ProtoReader): OffsetAttribute {
          var top: Float? = null
          var leading: Float? = null
          var bottom: Float? = null
          var trailing: Float? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> top = ProtoAdapter.FLOAT.decode(reader)
              2 -> leading = ProtoAdapter.FLOAT.decode(reader)
              3 -> bottom = ProtoAdapter.FLOAT.decode(reader)
              4 -> trailing = ProtoAdapter.FLOAT.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return OffsetAttribute(
            top = top,
            leading = leading,
            bottom = bottom,
            trailing = trailing,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: OffsetAttribute): OffsetAttribute = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class BorderAttribute(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      label = WireField.Label.OMIT_IDENTITY,
      schemaIndex = 0,
    )
    public val width: Float = 0f,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<BorderAttribute, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is BorderAttribute) return false
      if (unknownFields != other.unknownFields) return false
      if (width != other.width) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + width.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """width=$width"""
      return result.joinToString(prefix = "BorderAttribute{", separator = ", ", postfix = "}")
    }

    public fun copy(width: Float = this.width, unknownFields: ByteString = this.unknownFields): BorderAttribute = BorderAttribute(width, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<BorderAttribute> = object : ProtoAdapter<BorderAttribute>(
        FieldEncoding.LENGTH_DELIMITED, 
        BorderAttribute::class, 
        "type.googleapis.com/protobuf.source.attributes.Attributes.BorderAttribute", 
        PROTO_3, 
        null, 
        "attributes/attributes.proto"
      ) {
        override fun encodedSize(`value`: BorderAttribute): Int {
          var size = value.unknownFields.size
          if (!value.width.equals(0f)) {
            size += ProtoAdapter.FLOAT.encodedSizeWithTag(1, value.width)
          }
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: BorderAttribute) {
          if (!value.width.equals(0f)) {
            ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.width)
          }
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: BorderAttribute) {
          writer.writeBytes(value.unknownFields)
          if (!value.width.equals(0f)) {
            ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.width)
          }
        }

        override fun decode(reader: ProtoReader): BorderAttribute {
          var width: Float = 0f
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> width = ProtoAdapter.FLOAT.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return BorderAttribute(
            width = width,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: BorderAttribute): BorderAttribute = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
