// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protobuf.source.response.Response in response/response.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package protobuf.source.response

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.JvmField
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import okio.ByteString
import protobuf.source.screen.Screen
import protobuf.source.widget.Widget

public class Response(
  screens: List<Screen> = emptyList(),
  widgets: List<Widget> = emptyList(),
  @field:WireField(
    tag = 3,
    adapter = "protobuf.source.response.Response${'$'}Error#ADAPTER",
    schemaIndex = 2,
  )
  public val error: Error? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Response, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "protobuf.source.screen.Screen#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  public val screens: List<Screen> = immutableCopyOf("screens", screens)

  @field:WireField(
    tag = 2,
    adapter = "protobuf.source.widget.Widget#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 1,
  )
  public val widgets: List<Widget> = immutableCopyOf("widgets", widgets)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Response) return false
    if (unknownFields != other.unknownFields) return false
    if (screens != other.screens) return false
    if (widgets != other.widgets) return false
    if (error != other.error) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + screens.hashCode()
      result = result * 37 + widgets.hashCode()
      result = result * 37 + (error?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (screens.isNotEmpty()) result += """screens=$screens"""
    if (widgets.isNotEmpty()) result += """widgets=$widgets"""
    if (error != null) result += """error=$error"""
    return result.joinToString(prefix = "Response{", separator = ", ", postfix = "}")
  }

  public fun copy(
    screens: List<Screen> = this.screens,
    widgets: List<Widget> = this.widgets,
    error: Error? = this.error,
    unknownFields: ByteString = this.unknownFields,
  ): Response = Response(screens, widgets, error, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Response> = object : ProtoAdapter<Response>(
      FieldEncoding.LENGTH_DELIMITED,
      Response::class,
      "type.googleapis.com/protobuf.source.response.Response",
      PROTO_3,
      null,
      "response/response.proto"
    ) {
      override fun encodedSize(`value`: Response): Int {
        var size = value.unknownFields.size
        size += Screen.ADAPTER.asRepeated().encodedSizeWithTag(1, value.screens)
        size += Widget.ADAPTER.asRepeated().encodedSizeWithTag(2, value.widgets)
        size += Error.ADAPTER.encodedSizeWithTag(3, value.error)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Response) {
        Screen.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.screens)
        Widget.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.widgets)
        Error.ADAPTER.encodeWithTag(writer, 3, value.error)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Response) {
        writer.writeBytes(value.unknownFields)
        Error.ADAPTER.encodeWithTag(writer, 3, value.error)
        Widget.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.widgets)
        Screen.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.screens)
      }

      override fun decode(reader: ProtoReader): Response {
        val screens = mutableListOf<Screen>()
        val widgets = mutableListOf<Widget>()
        var error: Error? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> screens.add(Screen.ADAPTER.decode(reader))
            2 -> widgets.add(Widget.ADAPTER.decode(reader))
            3 -> error = Error.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Response(
          screens = screens,
          widgets = widgets,
          error = error,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Response): Response = value.copy(
        screens = value.screens.redactElements(Screen.ADAPTER),
        widgets = value.widgets.redactElements(Widget.ADAPTER),
        error = value.error?.let(Error.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public class Error(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY,
      schemaIndex = 0,
    )
    public val code: String = "",
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY,
      schemaIndex = 1,
    )
    public val message: String = "",
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<Error, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Error) return false
      if (unknownFields != other.unknownFields) return false
      if (code != other.code) return false
      if (message != other.message) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + code.hashCode()
        result = result * 37 + message.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """code=${sanitize(code)}"""
      result += """message=${sanitize(message)}"""
      return result.joinToString(prefix = "Error{", separator = ", ", postfix = "}")
    }

    public fun copy(
      code: String = this.code,
      message: String = this.message,
      unknownFields: ByteString = this.unknownFields,
    ): Error = Error(code, message, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Error> = object : ProtoAdapter<Error>(
        FieldEncoding.LENGTH_DELIMITED,
        Error::class,
        "type.googleapis.com/protobuf.source.response.Response.Error",
        PROTO_3,
        null,
        "response/response.proto"
      ) {
        override fun encodedSize(`value`: Error): Int {
          var size = value.unknownFields.size
          if (value.code != "") {
            size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.code)
          }
          if (value.message != "") {
            size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.message)
          }
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: Error) {
          if (value.code != "") {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.code)
          }
          if (value.message != "") {
            ProtoAdapter.STRING.encodeWithTag(writer, 2, value.message)
          }
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: Error) {
          writer.writeBytes(value.unknownFields)
          if (value.message != "") {
            ProtoAdapter.STRING.encodeWithTag(writer, 2, value.message)
          }
          if (value.code != "") {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.code)
          }
        }

        override fun decode(reader: ProtoReader): Error {
          var code: String = ""
          var message: String = ""
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> code = ProtoAdapter.STRING.decode(reader)
              2 -> message = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Error(
            code = code,
            message = message,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: Error): Error = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
