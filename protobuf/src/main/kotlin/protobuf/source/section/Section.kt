// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protobuf.source.section.Section in section/section.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package protobuf.source.section

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString
import protobuf.source.action.Action
import protobuf.source.attributes.Attributes
import protobuf.source.widget.Widget

public class Section(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  attributes: List<Attributes> = emptyList(),
  actions: List<Action> = emptyList(),
  @field:WireField(
    tag = 4,
    adapter = "protobuf.source.section.Section${'$'}Type#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val type: Type = Type.TYPE_UNSPECIFIED,
  @field:WireField(
    tag = 5,
    adapter = "protobuf.source.section.Section${'$'}StackDirection#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "stackDirection",
    schemaIndex = 4,
  )
  public val stack_direction: StackDirection = StackDirection.STACK_DIRECTION_UNSPECIFIED,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "debugName",
    schemaIndex = 5,
  )
  public val debug_name: String? = null,
  widgets: List<Widget> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Section, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    adapter = "protobuf.source.attributes.Attributes#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 1,
  )
  public val attributes: List<Attributes> = immutableCopyOf("attributes", attributes)

  @field:WireField(
    tag = 3,
    adapter = "protobuf.source.action.Action#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 2,
  )
  public val actions: List<Action> = immutableCopyOf("actions", actions)

  @field:WireField(
    tag = 7,
    adapter = "protobuf.source.widget.Widget#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 6,
  )
  public val widgets: List<Widget> = immutableCopyOf("widgets", widgets)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Section) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (attributes != other.attributes) return false
    if (actions != other.actions) return false
    if (type != other.type) return false
    if (stack_direction != other.stack_direction) return false
    if (debug_name != other.debug_name) return false
    if (widgets != other.widgets) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + attributes.hashCode()
      result = result * 37 + actions.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + stack_direction.hashCode()
      result = result * 37 + (debug_name?.hashCode() ?: 0)
      result = result * 37 + widgets.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    if (attributes.isNotEmpty()) result += """attributes=$attributes"""
    if (actions.isNotEmpty()) result += """actions=$actions"""
    result += """type=$type"""
    result += """stack_direction=$stack_direction"""
    if (debug_name != null) result += """debug_name=${sanitize(debug_name)}"""
    if (widgets.isNotEmpty()) result += """widgets=$widgets"""
    return result.joinToString(prefix = "Section{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    attributes: List<Attributes> = this.attributes,
    actions: List<Action> = this.actions,
    type: Type = this.type,
    stack_direction: StackDirection = this.stack_direction,
    debug_name: String? = this.debug_name,
    widgets: List<Widget> = this.widgets,
    unknownFields: ByteString = this.unknownFields,
  ): Section = Section(id, attributes, actions, type, stack_direction, debug_name, widgets, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Section> = object : ProtoAdapter<Section>(
      FieldEncoding.LENGTH_DELIMITED, 
      Section::class, 
      "type.googleapis.com/protobuf.source.section.Section", 
      PROTO_3, 
      null, 
      "section/section.proto"
    ) {
      override fun encodedSize(`value`: Section): Int {
        var size = value.unknownFields.size
        if (value.id != "") {
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        }
        size += Attributes.ADAPTER.asRepeated().encodedSizeWithTag(2, value.attributes)
        size += Action.ADAPTER.asRepeated().encodedSizeWithTag(3, value.actions)
        if (value.type != protobuf.source.section.Section.Type.TYPE_UNSPECIFIED) {
          size += Type.ADAPTER.encodedSizeWithTag(4, value.type)
        }
        if (value.stack_direction != protobuf.source.section.Section.StackDirection.STACK_DIRECTION_UNSPECIFIED) {
          size += StackDirection.ADAPTER.encodedSizeWithTag(5, value.stack_direction)
        }
        size += ProtoAdapter.STRING.encodedSizeWithTag(6, value.debug_name)
        size += Widget.ADAPTER.asRepeated().encodedSizeWithTag(7, value.widgets)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Section) {
        if (value.id != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        }
        Attributes.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.attributes)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.actions)
        if (value.type != protobuf.source.section.Section.Type.TYPE_UNSPECIFIED) {
          Type.ADAPTER.encodeWithTag(writer, 4, value.type)
        }
        if (value.stack_direction != protobuf.source.section.Section.StackDirection.STACK_DIRECTION_UNSPECIFIED) {
          StackDirection.ADAPTER.encodeWithTag(writer, 5, value.stack_direction)
        }
        ProtoAdapter.STRING.encodeWithTag(writer, 6, value.debug_name)
        Widget.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.widgets)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Section) {
        writer.writeBytes(value.unknownFields)
        Widget.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.widgets)
        ProtoAdapter.STRING.encodeWithTag(writer, 6, value.debug_name)
        if (value.stack_direction != protobuf.source.section.Section.StackDirection.STACK_DIRECTION_UNSPECIFIED) {
          StackDirection.ADAPTER.encodeWithTag(writer, 5, value.stack_direction)
        }
        if (value.type != protobuf.source.section.Section.Type.TYPE_UNSPECIFIED) {
          Type.ADAPTER.encodeWithTag(writer, 4, value.type)
        }
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.actions)
        Attributes.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.attributes)
        if (value.id != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        }
      }

      override fun decode(reader: ProtoReader): Section {
        var id: String = ""
        val attributes = mutableListOf<Attributes>()
        val actions = mutableListOf<Action>()
        var type: Type = Type.TYPE_UNSPECIFIED
        var stack_direction: StackDirection = StackDirection.STACK_DIRECTION_UNSPECIFIED
        var debug_name: String? = null
        val widgets = mutableListOf<Widget>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> attributes.add(Attributes.ADAPTER.decode(reader))
            3 -> actions.add(Action.ADAPTER.decode(reader))
            4 -> try {
              type = Type.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            5 -> try {
              stack_direction = StackDirection.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            6 -> debug_name = ProtoAdapter.STRING.decode(reader)
            7 -> widgets.add(Widget.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return Section(
          id = id,
          attributes = attributes,
          actions = actions,
          type = type,
          stack_direction = stack_direction,
          debug_name = debug_name,
          widgets = widgets,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Section): Section = value.copy(
        attributes = value.attributes.redactElements(Attributes.ADAPTER),
        actions = value.actions.redactElements(Action.ADAPTER),
        widgets = value.widgets.redactElements(Widget.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public enum class Type(
    override val `value`: Int,
  ) : WireEnum {
    TYPE_UNSPECIFIED(0),
    TYPE_HEADER(1),
    TYPE_BODY(2),
    TYPE_FOOTER(3),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Type> = object : EnumAdapter<Type>(
        Type::class, 
        PROTO_3, 
        Type.TYPE_UNSPECIFIED
      ) {
        override fun fromValue(`value`: Int): Type? = Type.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): Type? = when (`value`) {
        0 -> TYPE_UNSPECIFIED
        1 -> TYPE_HEADER
        2 -> TYPE_BODY
        3 -> TYPE_FOOTER
        else -> null
      }
    }
  }

  public enum class StackDirection(
    override val `value`: Int,
  ) : WireEnum {
    STACK_DIRECTION_UNSPECIFIED(0),
    STACK_DIRECTION_VERTICAL(1),
    STACK_DIRECTION_HORIZONTAL(2),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<StackDirection> = object : EnumAdapter<StackDirection>(
        StackDirection::class, 
        PROTO_3, 
        StackDirection.STACK_DIRECTION_UNSPECIFIED
      ) {
        override fun fromValue(`value`: Int): StackDirection? = StackDirection.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): StackDirection? = when (`value`) {
        0 -> STACK_DIRECTION_UNSPECIFIED
        1 -> STACK_DIRECTION_VERTICAL
        2 -> STACK_DIRECTION_HORIZONTAL
        else -> null
      }
    }
  }
}
