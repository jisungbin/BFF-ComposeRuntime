// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protobuf.source.widget.Widget in widget/widget.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package protobuf.source.widget

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.JvmField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import okio.ByteString
import protobuf.source.action.Action
import protobuf.source.attributes.Attributes

public class Widget(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  attributes: List<Attributes> = emptyList(),
  actions: List<Action> = emptyList(),
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "isSticky",
    schemaIndex = 3,
  )
  public val is_sticky: Boolean = false,
  @field:WireField(
    tag = 1_000,
    adapter = "protobuf.source.widget.SearchHospitalAWidgetContent#ADAPTER",
    jsonName = "searchHospitalA",
    oneofName = "content",
    schemaIndex = 4,
  )
  public val search_hospital_a: SearchHospitalAWidgetContent? = null,
  @field:WireField(
    tag = 2_000,
    adapter = "protobuf.source.widget.CellDividerWidgetContent#ADAPTER",
    jsonName = "cellDivider",
    oneofName = "content",
    schemaIndex = 5,
  )
  public val cell_divider: CellDividerWidgetContent? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Widget, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    adapter = "protobuf.source.attributes.Attributes#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 1,
  )
  public val attributes: List<Attributes> = immutableCopyOf("attributes", attributes)

  @field:WireField(
    tag = 3,
    adapter = "protobuf.source.action.Action#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 2,
  )
  public val actions: List<Action> = immutableCopyOf("actions", actions)

  init {
    require(countNonNull(search_hospital_a, cell_divider) <= 1) {
      "At most one of search_hospital_a, cell_divider may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Widget) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (attributes != other.attributes) return false
    if (actions != other.actions) return false
    if (is_sticky != other.is_sticky) return false
    if (search_hospital_a != other.search_hospital_a) return false
    if (cell_divider != other.cell_divider) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + attributes.hashCode()
      result = result * 37 + actions.hashCode()
      result = result * 37 + is_sticky.hashCode()
      result = result * 37 + (search_hospital_a?.hashCode() ?: 0)
      result = result * 37 + (cell_divider?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    if (attributes.isNotEmpty()) result += """attributes=$attributes"""
    if (actions.isNotEmpty()) result += """actions=$actions"""
    result += """is_sticky=$is_sticky"""
    if (search_hospital_a != null) result += """search_hospital_a=$search_hospital_a"""
    if (cell_divider != null) result += """cell_divider=$cell_divider"""
    return result.joinToString(prefix = "Widget{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    attributes: List<Attributes> = this.attributes,
    actions: List<Action> = this.actions,
    is_sticky: Boolean = this.is_sticky,
    search_hospital_a: SearchHospitalAWidgetContent? = this.search_hospital_a,
    cell_divider: CellDividerWidgetContent? = this.cell_divider,
    unknownFields: ByteString = this.unknownFields,
  ): Widget = Widget(id, attributes, actions, is_sticky, search_hospital_a, cell_divider, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Widget> = object : ProtoAdapter<Widget>(
      FieldEncoding.LENGTH_DELIMITED,
      Widget::class,
      "type.googleapis.com/protobuf.source.widget.Widget",
      PROTO_3,
      null,
      "widget/widget.proto"
    ) {
      override fun encodedSize(`value`: Widget): Int {
        var size = value.unknownFields.size
        if (value.id != "") {
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        }
        size += Attributes.ADAPTER.asRepeated().encodedSizeWithTag(2, value.attributes)
        size += Action.ADAPTER.asRepeated().encodedSizeWithTag(3, value.actions)
        if (value.is_sticky != false) {
          size += ProtoAdapter.BOOL.encodedSizeWithTag(4, value.is_sticky)
        }
        size += SearchHospitalAWidgetContent.ADAPTER.encodedSizeWithTag(1_000, value.search_hospital_a)
        size += CellDividerWidgetContent.ADAPTER.encodedSizeWithTag(2_000, value.cell_divider)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Widget) {
        if (value.id != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        }
        Attributes.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.attributes)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.actions)
        if (value.is_sticky != false) {
          ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.is_sticky)
        }
        SearchHospitalAWidgetContent.ADAPTER.encodeWithTag(writer, 1_000, value.search_hospital_a)
        CellDividerWidgetContent.ADAPTER.encodeWithTag(writer, 2_000, value.cell_divider)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Widget) {
        writer.writeBytes(value.unknownFields)
        CellDividerWidgetContent.ADAPTER.encodeWithTag(writer, 2_000, value.cell_divider)
        SearchHospitalAWidgetContent.ADAPTER.encodeWithTag(writer, 1_000, value.search_hospital_a)
        if (value.is_sticky != false) {
          ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.is_sticky)
        }
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.actions)
        Attributes.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.attributes)
        if (value.id != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        }
      }

      override fun decode(reader: ProtoReader): Widget {
        var id: String = ""
        val attributes = mutableListOf<Attributes>()
        val actions = mutableListOf<Action>()
        var is_sticky: Boolean = false
        var search_hospital_a: SearchHospitalAWidgetContent? = null
        var cell_divider: CellDividerWidgetContent? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> attributes.add(Attributes.ADAPTER.decode(reader))
            3 -> actions.add(Action.ADAPTER.decode(reader))
            4 -> is_sticky = ProtoAdapter.BOOL.decode(reader)
            1_000 -> search_hospital_a = SearchHospitalAWidgetContent.ADAPTER.decode(reader)
            2_000 -> cell_divider = CellDividerWidgetContent.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Widget(
          id = id,
          attributes = attributes,
          actions = actions,
          is_sticky = is_sticky,
          search_hospital_a = search_hospital_a,
          cell_divider = cell_divider,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Widget): Widget = value.copy(
        attributes = value.attributes.redactElements(Attributes.ADAPTER),
        actions = value.actions.redactElements(Action.ADAPTER),
        search_hospital_a = value.search_hospital_a?.let(SearchHospitalAWidgetContent.ADAPTER::redact),
        cell_divider = value.cell_divider?.let(CellDividerWidgetContent.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
