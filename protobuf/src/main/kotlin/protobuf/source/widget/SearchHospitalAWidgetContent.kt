// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protobuf.source.widget.SearchHospitalAWidgetContent in widget/search_hospital_a_widget_content.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package protobuf.source.widget

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString
import protobuf.source.action.Action
import protobuf.source.attributes.Attributes
import protobuf.source.component.CellTextComponent

public class SearchHospitalAWidgetContent(
  @field:WireField(
    tag = 1,
    adapter = "protobuf.source.component.CellTextComponent#ADAPTER",
    jsonName = "hospitalName",
    schemaIndex = 0,
  )
  public val hospital_name: CellTextComponent? = null,
  @field:WireField(
    tag = 2,
    adapter = "protobuf.source.component.CellTextComponent#ADAPTER",
    jsonName = "infoText",
    schemaIndex = 1,
  )
  public val info_text: CellTextComponent? = null,
  event_items: List<EventChildWidget> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<SearchHospitalAWidgetContent, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 3,
    adapter = "protobuf.source.widget.SearchHospitalAWidgetContent${'$'}EventChildWidget#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "eventItems",
    schemaIndex = 2,
  )
  public val event_items: List<EventChildWidget> = immutableCopyOf("event_items", event_items)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SearchHospitalAWidgetContent) return false
    if (unknownFields != other.unknownFields) return false
    if (hospital_name != other.hospital_name) return false
    if (info_text != other.info_text) return false
    if (event_items != other.event_items) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (hospital_name?.hashCode() ?: 0)
      result = result * 37 + (info_text?.hashCode() ?: 0)
      result = result * 37 + event_items.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (hospital_name != null) result += """hospital_name=$hospital_name"""
    if (info_text != null) result += """info_text=$info_text"""
    if (event_items.isNotEmpty()) result += """event_items=$event_items"""
    return result.joinToString(prefix = "SearchHospitalAWidgetContent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    hospital_name: CellTextComponent? = this.hospital_name,
    info_text: CellTextComponent? = this.info_text,
    event_items: List<EventChildWidget> = this.event_items,
    unknownFields: ByteString = this.unknownFields,
  ): SearchHospitalAWidgetContent = SearchHospitalAWidgetContent(hospital_name, info_text, event_items, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<SearchHospitalAWidgetContent> =
        object : ProtoAdapter<SearchHospitalAWidgetContent>(
      FieldEncoding.LENGTH_DELIMITED, 
      SearchHospitalAWidgetContent::class, 
      "type.googleapis.com/protobuf.source.widget.SearchHospitalAWidgetContent", 
      PROTO_3, 
      null, 
      "widget/search_hospital_a_widget_content.proto"
    ) {
      override fun encodedSize(`value`: SearchHospitalAWidgetContent): Int {
        var size = value.unknownFields.size
        size += CellTextComponent.ADAPTER.encodedSizeWithTag(1, value.hospital_name)
        size += CellTextComponent.ADAPTER.encodedSizeWithTag(2, value.info_text)
        size += EventChildWidget.ADAPTER.asRepeated().encodedSizeWithTag(3, value.event_items)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: SearchHospitalAWidgetContent) {
        CellTextComponent.ADAPTER.encodeWithTag(writer, 1, value.hospital_name)
        CellTextComponent.ADAPTER.encodeWithTag(writer, 2, value.info_text)
        EventChildWidget.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.event_items)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: SearchHospitalAWidgetContent) {
        writer.writeBytes(value.unknownFields)
        EventChildWidget.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.event_items)
        CellTextComponent.ADAPTER.encodeWithTag(writer, 2, value.info_text)
        CellTextComponent.ADAPTER.encodeWithTag(writer, 1, value.hospital_name)
      }

      override fun decode(reader: ProtoReader): SearchHospitalAWidgetContent {
        var hospital_name: CellTextComponent? = null
        var info_text: CellTextComponent? = null
        val event_items = mutableListOf<EventChildWidget>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> hospital_name = CellTextComponent.ADAPTER.decode(reader)
            2 -> info_text = CellTextComponent.ADAPTER.decode(reader)
            3 -> event_items.add(EventChildWidget.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return SearchHospitalAWidgetContent(
          hospital_name = hospital_name,
          info_text = info_text,
          event_items = event_items,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: SearchHospitalAWidgetContent): SearchHospitalAWidgetContent = value.copy(
        hospital_name = value.hospital_name?.let(CellTextComponent.ADAPTER::redact),
        info_text = value.info_text?.let(CellTextComponent.ADAPTER::redact),
        event_items = value.event_items.redactElements(EventChildWidget.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public class EventChildWidget(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY,
      schemaIndex = 0,
    )
    public val id: String = "",
    attributes: List<Attributes> = emptyList(),
    actions: List<Action> = emptyList(),
    @field:WireField(
      tag = 4,
      adapter = "protobuf.source.component.CellTextComponent#ADAPTER",
      schemaIndex = 3,
    )
    public val title: CellTextComponent? = null,
    @field:WireField(
      tag = 5,
      adapter = "protobuf.source.component.CellTextComponent#ADAPTER",
      schemaIndex = 4,
    )
    public val cost: CellTextComponent? = null,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<EventChildWidget, Nothing>(ADAPTER, unknownFields) {
    @field:WireField(
      tag = 2,
      adapter = "protobuf.source.attributes.Attributes#ADAPTER",
      label = WireField.Label.REPEATED,
      schemaIndex = 1,
    )
    public val attributes: List<Attributes> = immutableCopyOf("attributes", attributes)

    @field:WireField(
      tag = 3,
      adapter = "protobuf.source.action.Action#ADAPTER",
      label = WireField.Label.REPEATED,
      schemaIndex = 2,
    )
    public val actions: List<Action> = immutableCopyOf("actions", actions)

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is EventChildWidget) return false
      if (unknownFields != other.unknownFields) return false
      if (id != other.id) return false
      if (attributes != other.attributes) return false
      if (actions != other.actions) return false
      if (title != other.title) return false
      if (cost != other.cost) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + id.hashCode()
        result = result * 37 + attributes.hashCode()
        result = result * 37 + actions.hashCode()
        result = result * 37 + (title?.hashCode() ?: 0)
        result = result * 37 + (cost?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """id=${sanitize(id)}"""
      if (attributes.isNotEmpty()) result += """attributes=$attributes"""
      if (actions.isNotEmpty()) result += """actions=$actions"""
      if (title != null) result += """title=$title"""
      if (cost != null) result += """cost=$cost"""
      return result.joinToString(prefix = "EventChildWidget{", separator = ", ", postfix = "}")
    }

    public fun copy(
      id: String = this.id,
      attributes: List<Attributes> = this.attributes,
      actions: List<Action> = this.actions,
      title: CellTextComponent? = this.title,
      cost: CellTextComponent? = this.cost,
      unknownFields: ByteString = this.unknownFields,
    ): EventChildWidget = EventChildWidget(id, attributes, actions, title, cost, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<EventChildWidget> = object : ProtoAdapter<EventChildWidget>(
        FieldEncoding.LENGTH_DELIMITED, 
        EventChildWidget::class, 
        "type.googleapis.com/protobuf.source.widget.SearchHospitalAWidgetContent.EventChildWidget", 
        PROTO_3, 
        null, 
        "widget/search_hospital_a_widget_content.proto"
      ) {
        override fun encodedSize(`value`: EventChildWidget): Int {
          var size = value.unknownFields.size
          if (value.id != "") {
            size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
          }
          size += Attributes.ADAPTER.asRepeated().encodedSizeWithTag(2, value.attributes)
          size += Action.ADAPTER.asRepeated().encodedSizeWithTag(3, value.actions)
          size += CellTextComponent.ADAPTER.encodedSizeWithTag(4, value.title)
          size += CellTextComponent.ADAPTER.encodedSizeWithTag(5, value.cost)
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: EventChildWidget) {
          if (value.id != "") {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
          }
          Attributes.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.attributes)
          Action.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.actions)
          CellTextComponent.ADAPTER.encodeWithTag(writer, 4, value.title)
          CellTextComponent.ADAPTER.encodeWithTag(writer, 5, value.cost)
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: EventChildWidget) {
          writer.writeBytes(value.unknownFields)
          CellTextComponent.ADAPTER.encodeWithTag(writer, 5, value.cost)
          CellTextComponent.ADAPTER.encodeWithTag(writer, 4, value.title)
          Action.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.actions)
          Attributes.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.attributes)
          if (value.id != "") {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
          }
        }

        override fun decode(reader: ProtoReader): EventChildWidget {
          var id: String = ""
          val attributes = mutableListOf<Attributes>()
          val actions = mutableListOf<Action>()
          var title: CellTextComponent? = null
          var cost: CellTextComponent? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> id = ProtoAdapter.STRING.decode(reader)
              2 -> attributes.add(Attributes.ADAPTER.decode(reader))
              3 -> actions.add(Action.ADAPTER.decode(reader))
              4 -> title = CellTextComponent.ADAPTER.decode(reader)
              5 -> cost = CellTextComponent.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return EventChildWidget(
            id = id,
            attributes = attributes,
            actions = actions,
            title = title,
            cost = cost,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: EventChildWidget): EventChildWidget = value.copy(
          attributes = value.attributes.redactElements(Attributes.ADAPTER),
          actions = value.actions.redactElements(Action.ADAPTER),
          title = value.title?.let(CellTextComponent.ADAPTER::redact),
          cost = value.cost?.let(CellTextComponent.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
