// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protobuf.source.widget.CellDividerWidgetContent in widget/cell_divider_widget_content.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package protobuf.source.widget

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.JvmField
import com.squareup.wire.internal.sanitize
import okio.ByteString
import protobuf.source.component.CellColor
import protobuf.source.component.CellDividerComponent

public class CellDividerWidgetContent(
  @field:WireField(
    tag = 1,
    adapter = "protobuf.source.component.CellDividerComponent#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val divider: CellDividerComponent? = null,
  @field:WireField(
    tag = 2,
    adapter = "protobuf.source.component.CellColor#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val color: CellColor = CellColor.CELL_COLOR_UNSPECIFIED,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "debugName",
    schemaIndex = 2,
  )
  public val debug_name: String? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<CellDividerWidgetContent, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CellDividerWidgetContent) return false
    if (unknownFields != other.unknownFields) return false
    if (divider != other.divider) return false
    if (color != other.color) return false
    if (debug_name != other.debug_name) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (divider?.hashCode() ?: 0)
      result = result * 37 + color.hashCode()
      result = result * 37 + (debug_name?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (divider != null) result += """divider=$divider"""
    result += """color=$color"""
    if (debug_name != null) result += """debug_name=${sanitize(debug_name)}"""
    return result.joinToString(prefix = "CellDividerWidgetContent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    divider: CellDividerComponent? = this.divider,
    color: CellColor = this.color,
    debug_name: String? = this.debug_name,
    unknownFields: ByteString = this.unknownFields,
  ): CellDividerWidgetContent = CellDividerWidgetContent(divider, color, debug_name, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CellDividerWidgetContent> =
      object : ProtoAdapter<CellDividerWidgetContent>(
        FieldEncoding.LENGTH_DELIMITED,
        CellDividerWidgetContent::class,
        "type.googleapis.com/protobuf.source.widget.CellDividerWidgetContent",
        PROTO_3,
        null,
        "widget/cell_divider_widget_content.proto"
      ) {
        override fun encodedSize(`value`: CellDividerWidgetContent): Int {
          var size = value.unknownFields.size
          if (value.divider != null) {
            size += CellDividerComponent.ADAPTER.encodedSizeWithTag(1, value.divider)
          }
          if (value.color != protobuf.source.component.CellColor.CELL_COLOR_UNSPECIFIED) {
            size += CellColor.ADAPTER.encodedSizeWithTag(2, value.color)
          }
          size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.debug_name)
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: CellDividerWidgetContent) {
          if (value.divider != null) {
            CellDividerComponent.ADAPTER.encodeWithTag(writer, 1, value.divider)
          }
          if (value.color != protobuf.source.component.CellColor.CELL_COLOR_UNSPECIFIED) {
            CellColor.ADAPTER.encodeWithTag(writer, 2, value.color)
          }
          ProtoAdapter.STRING.encodeWithTag(writer, 3, value.debug_name)
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: CellDividerWidgetContent) {
          writer.writeBytes(value.unknownFields)
          ProtoAdapter.STRING.encodeWithTag(writer, 3, value.debug_name)
          if (value.color != protobuf.source.component.CellColor.CELL_COLOR_UNSPECIFIED) {
            CellColor.ADAPTER.encodeWithTag(writer, 2, value.color)
          }
          if (value.divider != null) {
            CellDividerComponent.ADAPTER.encodeWithTag(writer, 1, value.divider)
          }
        }

        override fun decode(reader: ProtoReader): CellDividerWidgetContent {
          var divider: CellDividerComponent? = null
          var color: CellColor = CellColor.CELL_COLOR_UNSPECIFIED
          var debug_name: String? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> divider = CellDividerComponent.ADAPTER.decode(reader)
              2 -> try {
                color = CellColor.ADAPTER.decode(reader)
              } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
                reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
              }
              3 -> debug_name = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return CellDividerWidgetContent(
            divider = divider,
            color = color,
            debug_name = debug_name,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: CellDividerWidgetContent): CellDividerWidgetContent = value.copy(
          divider = value.divider?.let(CellDividerComponent.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

    private const val serialVersionUID: Long = 0L
  }
}
